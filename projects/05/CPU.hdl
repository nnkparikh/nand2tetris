// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // instruction is either of type A or C
    Not(in=instruction[15], out=ainst); 
    Not(in=ainst, out=cinst);
    Or(a=ainst,b=instruction[5],out=loada);

    Mux16(a=ALUoutM, b=instruction, sel=ainst, out=ain);
    ARegister(in=ain, load=loada, out=aout, out[0..14]=addressM);

    // register d has to be loaded if instruction is of type c
    // and the alu computation is stored within register d.
    And(a=cinst, b=instruction[4], out=loadd);
    DRegister(in=ALUoutM, load=loadd, out=dout);

    // select either the value in A or M=Memory[A]
    And(a=instruction[12], b=cinst, out=aORm);
    Mux16(a=aout, b=inM, sel=aORm, out=AMout);

    // write to M? 
    And(a=cinst, b=instruction[3], out=writeM);

    // ALU computation
    ALU(x=dout, y=AMout, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],
        out=ALUoutM, out=outM, zr=zr, ng=ng);

    And(a=cinst, b=instruction[0], out=jgt);
    And(a=cinst, b=instruction[1], out=jeq);
    And(a=cinst, b=instruction[2], out=jlt);

    Not(in=ng, out=ALUoutpos); // ALU output >= 0
    Not(in=zr, out=ALUoutnonzero); // ALU output != 0
    And(a=ALUoutpos, b=ALUoutnonzero, out=ALUoutgtzero); // ALU output > 0

    And(a=jgt, b=ALUoutgtzero, out=jmpjgt);
    And(a=jeq, b=zr, out=jmpjeq);
    And(a=jlt, b=ng, out=jmpjlt);

    Or(a=jmpjgt, b=jmpjeq, out=jmp1);
    Or(a=jmp1, b=jmpjlt, out=jmpload);

    PC(in=aout, reset=reset, inc=true, load=jmpload, out[0..14]=pc);
}